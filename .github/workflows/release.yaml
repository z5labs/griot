name: Release

on:
  release:
    types:
      - published

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4

        - name: Mount Bazel cache
          uses: actions/cache@3624ceb22c1c5a301c8db4169662070a689d9ea8 # v4
          with:
            path: |
              ~/.cache/bazel
            key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'MODULE.bazel') }}
            restore-keys: |
              ${{ runner.os }}-bazel-

        - name: Fetch dependencies
          run: bazel fetch //...
  
        - name: Build
          run: bazel build //...
  
        - name: Test
          run: bazel test //...

        - name: Login to GitHub Container Registry
          uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build and publish images
          run: |
            tarballTargets=$(bazel query "kind(filegroup, //...)" | grep ".tar$")
            while IFS=';' read -ra tarballs; do
            for tarball in "${tarballs[@]}"; do
                bazel build $tarball
                tarFiles=$(bazel cquery --noshow_progress --ui_event_filters=-info,-stderr --output=files $tarball)
                img=$(docker load -q --input $tarFiles)
                imgWithTag=${img#"Loaded image: "}
                imgAndTag=(${imgWithTag//:/ })
                img=${imgAndTag[0]}
                tag=${imgAndTag[1]}
                docker tag $imgWithTag "$img:${{ github.event.release.tag_name }}"
                docker push -a $img
            done
            done <<< "$tarballTargets"